/*
 * WorkingMemory.java
 *
 * Created on 17 sierpieñ 2003, 17:02
 */
//package rulexec;

//import rulexec.MemoryServer.*;
import java.util.*;
import java.io.*;
import java.lang.reflect.*;
import MemoryServer.*;
import org.omg.CORBA.*;
import org.omg.CORBA.ORB;
import org.omg.CORBA.Object;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CORBA.Policy;
import org.omg.PortableServer.Servant;
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;


/**
 *
 * @author  pms
 */
public class WorkingMemory extends javax.swing.JFrame implements java.awt.event.ActionListener{
    public WMServant servant;
    public Process process = null;
    private int reset = 0;

    private String javc_s = "javac";
    private String orbd_s = "orbd";
    private String idlj_s = "idlj -fall";
    private String port_s = "-ORBInitialPort 2500";

    // Interface for memory server for refreshing the list of objects viewwhen such a list changes within server
    public void actionPerformed(java.awt.event.ActionEvent e)
    {
          int i = ((javax.swing.DefaultListModel)jList1.getModel()).indexOf(e.getActionCommand());
          if(e.getID() < 0 && i > 0) ((javax.swing.DefaultListModel)jList1.getModel()).removeElementAt(i);
          else if(i < 0) ((javax.swing.DefaultListModel)jList1.getModel()).addElement(e.getActionCommand());
//		((javax.swing.DefaultListModel)jList1.getModel()).addElement(e.getActionCommand());
//		jTextArea2.append(jList1.getModel().getClass().toString());
    }
    
    
    /** Creates new form WorkingMemory */
    public WorkingMemory() {
        initComponents();
        LoadOptions();
        jList1.setModel(new javax.swing.DefaultListModel());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField1 = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonOpen = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();

        setTitle("Working Memory");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane3.setBorder(null);
        jScrollPane3.setAutoscrolls(true);
        jTextArea2.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea2.setEditable(false);
        jTextArea2.setLineWrap(true);
        jTextArea2.setTabSize(2);
        jTextArea2.setToolTipText("Click on the list in the left panel");
        jTextArea2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTextArea2);

        jSplitPane1.setRightComponent(jScrollPane3);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(128, 131));
        jScrollPane1.setAutoscrolls(true);
        jList1.setBackground(new java.awt.Color(220, 255, 220));
        jList1.setToolTipText("List of memory objects");
        jList1.setValueIsAdjusting(true);
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList1MouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jTextField1.setBackground(new java.awt.Color(204, 204, 204));
        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Dialog", 0, 10));
        jTextField1.setText("Inactive");
        jTextField1.setBorder(null);
        getContentPane().add(jTextField1, java.awt.BorderLayout.SOUTH);

        jToolBar1.setBorder(null);
        jButtonOpen.setFont(new java.awt.Font("Dialog", 1, 10));
        jButtonOpen.setIcon(new javax.swing.ImageIcon("run.gif"));
        jButtonOpen.setText("Load&Start    ");
        jButtonOpen.setToolTipText("Loads memory from file and starts server");
        jButtonOpen.setBorder(null);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonOpen);

        jButtonNew.setFont(new java.awt.Font("Dialog", 1, 10));
        jButtonNew.setIcon(new javax.swing.ImageIcon("res.gif"));
        jButtonNew.setText("Reset&Start    ");
        jButtonNew.setToolTipText("Starts server with cleared memory");
        jButtonNew.setBorder(null);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonNew);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        pack();
    }//GEN-END:initComponents

    private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased
        int index = jList1.getSelectedIndex();
        if(index < 0) return;
        javax.swing.DefaultListModel mod = (javax.swing.DefaultListModel)jList1.getModel();
        String name = (String)mod.elementAt(index);
        Any any = servant.WMGetItem(name);
        if(any == null)
        {
            jTextArea2.setText("null");
            return;
        }
        TypeCode tc = any.type();
        
        String split[] =  tc.toString().split(";");
        StringBuffer sb = new StringBuffer();
        
        ArrayList al = GetValues(any);
        int as = al.size();
        
        for(int i = 0; i < split.length; i++)
        {
			if(i < as) sb.append(split[i] + " = " + al.get(i).toString() + ";");
			else sb.append(split[i] + ";");
        }
        jTextArea2.setText(sb.toString());
    }//GEN-LAST:event_jList1MouseReleased

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        (new RegisterServer(true, jTextField1, this)).start();
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        (new RegisterServer(false, jTextField1, this)).start();
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
    
	    int k = evt.getKeyCode() + reset;
	    switch(k)
	    {
			case 0x000052: reset+=0x100000; break;
			case 0x100045: reset+=0x100000; break;
			case 0x200053: reset+=0x100000; break;
			case 0x300045: reset+=0x100000; break;
			case 0x400054:
				servant.Reset(); 
				((javax.swing.DefaultListModel)jList1.getModel()).clear(); 
			break;
			default: reset = 0;
	    }
    
        jList1MouseReleased(null);
    }//GEN-LAST:event_jList1KeyReleased

	private ArrayList GetValues(Any any)
	{
		ArrayList al = new ArrayList();
		try{
			org.omg.CORBA.portable.InputStream istream = any.create_input_stream();
			TypeCode tc = any.type();
			int mc = tc.member_count();

			if(mc > 0)
			{
				for(int i = 0; i < mc; i++)
				{
					switch(tc.member_type(i).kind().value())
					{
						case org.omg.CORBA.TCKind._tk_short: al.add(""+""+istream.read_short()); break;
						case org.omg.CORBA.TCKind._tk_long: al.add(""+istream.read_long()); break;
						case org.omg.CORBA.TCKind._tk_ushort: al.add(""+istream.read_ushort()); break;
						case org.omg.CORBA.TCKind._tk_ulong: al.add(""+istream.read_ulong()); break;
						case org.omg.CORBA.TCKind._tk_float: al.add(""+istream.read_float()); break;
						case org.omg.CORBA.TCKind._tk_double: al.add(""+istream.read_double()); break;
						case org.omg.CORBA.TCKind._tk_boolean: al.add(""+istream.read_boolean()); break;
						case org.omg.CORBA.TCKind._tk_char: al.add(""+istream.read_char()); break;
						case org.omg.CORBA.TCKind._tk_octet: al.add(""+istream.read_octet()); break;
						case org.omg.CORBA.TCKind._tk_string: al.add(""+istream.read_string()); break;
						case org.omg.CORBA.TCKind._tk_longlong: al.add(""+istream.read_longlong()); break;
						case org.omg.CORBA.TCKind._tk_ulonglong: al.add(""+istream.read_ulonglong()); break;
						case org.omg.CORBA.TCKind._tk_wchar: al.add(""+istream.read_wchar()); break;
						case org.omg.CORBA.TCKind._tk_wstring: al.add(""+istream.read_wstring()); break;
						case org.omg.CORBA.TCKind._tk_fixed: al.add(""+istream.read_fixed()); break;
						default: istream.close(); return al;
					}
				}
			}
			else
			{
				istream.close();
				return al;
			}
			istream.close();
			return al;
		}
		catch(Throwable e)
		{
		}
		return al;
	}
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        (new SaveExit(jTextField1, this)).start();
    }//GEN-LAST:event_exitForm
    


    private void LoadOptions()
    {
      try
      {
        FileInputStream in = new FileInputStream("Options.mem");
			  ObjectInputStream instream = new ObjectInputStream(in);
    //javac, java, idlj, orbd, 
        javc_s = (String)instream.readObject();
        instream.readObject();
        idlj_s = (String)instream.readObject();
        orbd_s = (String)instream.readObject();

    //server name, port
        instream.readObject();
        port_s = (String)instream.readObject();

        instream.close();
			  in.close();
      }
      catch(Throwable e) {};
    }


    private void RunORBD()
    {
        try {
          jTextField1.setText("Initializing ORBD...");
          process = Runtime.getRuntime().exec(orbd_s+" "+port_s, null, null);
          jTextField1.setText("ORBD running");
        } catch (Exception e) {
		    jTextField1.setText("Cannot initialize ORBD :-(");
            System.err.println(e.getMessage());
            e.printStackTrace();
		}
	}
    
    class RegisterServer extends Thread
	{
		boolean load;
		javax.swing.JTextField textfield;
		WorkingMemory wm;
		public RegisterServer(boolean _load, javax.swing.JTextField _textfield, WorkingMemory _wm)
		{
			load = _load;
			textfield = _textfield;
			wm = _wm;
		}
 		public void run()
		{
			try {

				jTextField1.setText("Initializing ORB...");
		            
				String[] args = port_s.split(" ");

        ORB orb = ORB.init(args, null);
		          
				if(load) textfield.setText("Loading objects...");
				else textfield.setText("Reseting object lists...");
				wm.servant = new WMServant(orb, (java.awt.event.ActionListener)wm, load, idlj_s, javc_s);
		          
				jTextField1.setText("Initializing server...");
				// get reference to rootpoa and activate the POAManager
				POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
				rootpoa.the_POAManager().activate( );
				org.omg.CORBA.Object ref = rootpoa.servant_to_reference(servant);
		          
				WMGetSetObject href = WMGetSetObjectHelper.narrow(ref);
				org.omg.CORBA.Object objref = null;

				objref = orb.resolve_initial_references("NameService");
		          
				NamingContextExt rootContext = NamingContextExtHelper.narrow(objref);
				NameComponent path[] = rootContext.to_name("WMGetSetObject");
				rootContext.rebind(path, href);
				wm.jButtonOpen.setEnabled(false);
				wm.jButtonNew.setEnabled(false);
				textfield.setText("Memory server active: "+port_s);
				orb.run();

			} catch (Exception e) {
				textfield.setText("Memory server error :-(");
				System.err.println("Exception in WMServer Startup " + e);
				System.err.println(e.getMessage());
				e.printStackTrace();
			}
		}
	}    
    
    class SaveExit extends Thread
	{
		javax.swing.JTextField textfield;
		WorkingMemory wm;
		public SaveExit(javax.swing.JTextField _textfield, WorkingMemory _wm)
		{
			wm = _wm;
			textfield = _textfield;
		}
 		public void run()
		{
			try {
				textfield.setText("Saving objects...");
				if(wm.servant!=null)
					wm.servant.WMSaveMemory(System.err);
				if(wm.process != null)
				{
					try{wm.process.destroy();} catch(Throwable e){};
				}
				System.exit(0);
			} catch (Exception e) {
				System.err.println(e.getMessage());
				e.printStackTrace();
			}
		}
	}    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WorkingMemory wm = new WorkingMemory();
        wm.show();
        wm.RunORBD();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JList jList1;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
}

