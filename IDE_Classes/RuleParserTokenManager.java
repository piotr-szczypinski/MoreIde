/* Generated By:JavaCC: Do not edit this line. RuleParserTokenManager.java */
import java.util.*;
import java.io.*;
import java.lang.*;

public class RuleParserTokenManager implements RuleParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 39;
            return 28;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 85;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 39;
            return 13;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 39;
            return 11;
         }
         if ((active0 & 0x7e01bff900L) != 0L)
         {
            jjmatchedKind = 39;
            return 37;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x7e01fff700L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x800L) != 0L)
            return 37;
         return -1;
      case 2:
         if ((active0 & 0x7e01dff300L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 37;
         }
         if ((active0 & 0x200400L) != 0L)
            return 37;
         return -1;
      case 3:
         if ((active0 & 0x6e00cb2200L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 3;
            }
            return 37;
         }
         if ((active0 & 0x100114d100L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x4000028200L) != 0L)
            return 37;
         if ((active0 & 0x2e00c92000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 37;
         }
         return -1;
      case 5:
         if ((active0 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active0 & 0x2e00092000L) != 0L)
            return 37;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 53);
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 52);
      case 42:
         return jjStopAtPos(0, 58);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 54);
      case 45:
         return jjStopAtPos(0, 57);
      case 47:
         return jjStartNfaWithStates_0(0, 59, 85);
      case 58:
         return jjStopAtPos(0, 51);
      case 59:
         return jjStopAtPos(0, 62);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xe000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xa0000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x50100L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1001000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc00000000L);
      case 123:
         return jjStopAtPos(0, 60);
      case 124:
         return jjStartNfaWithStates_0(0, 55, 15);
      case 125:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_0(12, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000L);
      case 70:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 37);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x3200000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x401000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 74:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 37);
         break;
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 82:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 37);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 68:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 37);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 37);
         break;
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 37);
         else if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 78:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 83:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 37);
         break;
      case 84:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 37);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 37);
         break;
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 37);
         break;
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 89:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 37);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 37);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 37);
         break;
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 37);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 37);
         break;
      case 89:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 102;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 85:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(91, 92);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(42);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(17, 19);
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 11:
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(37);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(37);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(37);
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 2:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 7)
                     kind = 7;
                  break;
               case 20:
                  if (curChar == 38 && kind > 26)
                     kind = 26;
                  break;
               case 21:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 23:
                  if (curChar == 61 && kind > 28)
                     kind = 28;
                  break;
               case 24:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 60 && kind > 29)
                     kind = 29;
                  break;
               case 26:
                  if (curChar == 61 && kind > 30)
                     kind = 30;
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if (curChar == 61 && kind > 31)
                     kind = 31;
                  break;
               case 31:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if (curChar == 61 && kind > 32)
                     kind = 32;
                  break;
               case 35:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(22, 24);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 48:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if (curChar == 39 && kind > 48)
                     kind = 48;
                  break;
               case 51:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 49);
                  break;
               case 53:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 54:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 56:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 57:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 59:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 60:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 62:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 63:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(71, 46);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(75, 46);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 46);
                  break;
               case 80:
                  if (curChar != 48)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(17, 19);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(82, 40);
                  break;
               case 83:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(83, 40);
                  break;
               case 84:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 86:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 87:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 88:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 89:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 91:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar == 42)
                     jjCheckNAddStates(35, 37);
                  break;
               case 93:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               case 94:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               case 95:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 76)
                     jjAddStates(38, 39);
                  else if (curChar == 71)
                     jjAddStates(40, 41);
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 81)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 82)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 0:
                  if (curChar == 84)
                     jjAddStates(20, 21);
                  break;
               case 5:
                  jjAddStates(42, 43);
                  break;
               case 7:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 8:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 14:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 124 && kind > 25)
                     kind = 25;
                  break;
               case 16:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 68 && kind > 26)
                     kind = 26;
                  break;
               case 18:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 29:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 69 && kind > 32)
                     kind = 32;
                  break;
               case 33:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(37);
                  break;
               case 40:
                  if ((0x100000001000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 46:
                  if ((0x5000000050L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 51:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 57:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 58:
                  if (curChar == 92)
                     jjAddStates(49, 51);
                  break;
               case 59:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 81:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(82, 40);
                  break;
               case 86:
                  jjAddStates(0, 2);
                  break;
               case 91:
                  jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
               case 94:
                  jjCheckNAddTwoStates(94, 92);
                  break;
               case 96:
                  if (curChar == 71)
                     jjAddStates(40, 41);
                  break;
               case 97:
                  if (curChar == 84 && kind > 27)
                     kind = 27;
                  break;
               case 98:
                  if (curChar == 69 && kind > 28)
                     kind = 28;
                  break;
               case 99:
                  if (curChar == 76)
                     jjAddStates(38, 39);
                  break;
               case 100:
                  if (curChar == 84 && kind > 29)
                     kind = 29;
                  break;
               case 101:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 86:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
               case 94:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 102 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   86, 87, 89, 66, 67, 72, 73, 76, 77, 46, 85, 90, 57, 58, 60, 48, 
   50, 81, 83, 40, 1, 2, 42, 43, 46, 57, 58, 62, 60, 68, 69, 46, 
   76, 77, 46, 92, 93, 95, 100, 101, 97, 98, 5, 6, 44, 45, 51, 52, 
   54, 59, 61, 63, 70, 71, 74, 75, 78, 79, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\122\125\114\105", 
"\103\114\101\123\123", "\117\102\112", "\111\106", "\124\110\105\116", "\115\117\104\111\106\131", 
"\115\101\113\105", "\115\101\113\105\124", "\122\105\115\117\126\105", "\120\122\111\116\124", 
"\122\105\101\104", "\120\122\117\115\120\124", "\102\111\116\104", "\126\101\122", 
"\105\130\105\103\125\124\105", "\104\111\123\120\114\101\131", "\124\131\120\105", null, null, null, null, 
null, null, null, null, "\155\157\144\165\154\145", "\163\164\162\165\143\164", 
"\163\164\162\151\156\147", "\154\157\156\147", "\144\157\165\142\154\145", "\146\154\157\141\164", null, 
null, null, null, null, null, null, null, null, null, null, "\50", "\72", "\51", 
"\44", "\54", "\174", "\53", "\55", "\52", "\57", "\173", "\175", "\73", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fff44ffffffff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static private SimpleCharStream input_stream;
static private final int[] jjrounds = new int[102];
static private final int[] jjstateSet = new int[204];
static protected char curChar;
public RuleParserTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public RuleParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 102; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
