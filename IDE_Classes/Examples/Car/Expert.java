//==============================================================================
//==============================================================================
//==                                    ===****=====**=====**=====****==========
//==  Expert.java                       ===*===*====*=*===*=*====*====*=========
//==                                    ===*===*====*==*=*==*=====**============
//==  (C) 2002 by Piotr M. Szczypinski  ===****=====*===*===*=======**==========
//==  NIST - Gaithersburg               ===*========*=======*====*====*=========
//==                                    ===*========*=======*=====****==========
//==============================================================================
//==============================================================================
import MemoryServer.*;
import ReteObjects.*;
/**
 *
 * @author  pms
 */
public class Expert extends javax.swing.JFrame {
		private boolean reading = false;
		private CheckMemoryThread ithread = null;
		public ReteNetwork rn = null;
    
    public String Question = new String();
    public String Answer = new String();
    public double Certainty;
    
    private synchronized void SetReading(boolean r)
		{
			reading = r;
			notifyAll();
    }
		public void Print(String string)
		{
        jTextArea1.append(string);
		}
		public void PrintMessage(String string)
		{
				jTextField2.setText(string);
		}
    
		public String Read()
		{
				reading = true;
        if(Certainty > 5 || Certainty < -5)
        {
            jSlider1.setVisible(false);
            jTextField3.setVisible(false);
        }    
        else
        {
            jSlider1.setValue((int)(100 * Certainty));
            jSlider1.setVisible(true);
            jTextField3.setVisible(true);        
            jSlider1StateChanged(null);
        }
        jTextField1.setText("");
        jTextArea2.setText(Question);
        jDialogQuery.setVisible(true);
        while(reading == true) 
				{
					try{Thread.yield();}
					catch(Throwable e){}
				}

        if(Certainty > 5 || Certainty < -5)
            Print(Answer + "\r\n");
        else 
            Print(Answer + " {Certainty = " + Certainty + "}\r\n");
				return Answer;
		}
  
		public void Display(String filename)
		{
        javax.swing.ImageIcon ii = new javax.swing.ImageIcon (filename);
        
        java.awt.Rectangle rr = jFrameDisplay.getBounds();
        java.awt.Rectangle r2 = jScrollPane1.getBounds();
        
        jFrameDisplay.setTitle(filename);
        jLabel1.setIcon(ii);
        
        jFrameDisplay.setBounds(rr.x, rr.y, //ii.getIconWidth() + 24, ii.getIconHeight() + 36);  
            rr.width + ii.getIconWidth() - r2.width, 
            rr.height + ii.getIconHeight() - r2.height);
        jFrameDisplay.setVisible(true);
		}
 
		/** Creates new form Expert */
		public Expert() {
				initComponents();
		}

		/** This method is called from within the constructor to
		 * initialize the form.
		 * WARNING: Do NOT modify this code. The content of this method is
		 * always regenerated by the Form Editor.
		 */
    private void initComponents() {//GEN-BEGIN:initComponents
        jFrameDisplay = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jDialogQuery = jDialogQuery = new javax.swing.JDialog(this);
        jDialogQuery.setBounds(10, 380, 320, 160);
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jTextField3 = new javax.swing.JTextField();
        jButtonOK = new javax.swing.JButton();
        jFrameTree = new javax.swing.JFrame();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemDisplay = new javax.swing.JMenuItem();
        jMenuItemNet = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemExit = new javax.swing.JMenuItem();

        jFrameDisplay.setTitle("Display");
        jFrameDisplay.setLocationRelativeTo(this);
        jScrollPane1.setBorder(null);
        jScrollPane1.setAutoscrolls(true);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setAlignmentX(0.5F);
        jLabel1.setAutoscrolls(true);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel1.setOpaque(true);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(jLabel1);

        jFrameDisplay.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jDialogQuery.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialogQuery.setTitle("Query");
        jDialogQuery.setLocationRelativeTo(this);
        jDialogQuery.setResizable(false);
        jPanel2.setLayout(new java.awt.BorderLayout());

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jPanel2.add(jTextField1, java.awt.BorderLayout.SOUTH);

        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setEditable(false);
        jTextArea2.setLineWrap(true);
        jTextArea2.setToolTipText("Select desired text and copy it to answer field by clicking right mouse button");
        jTextArea2.setSelectionColor(new java.awt.Color(255, 255, 255));
        jTextArea2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea2MouseClicked(evt);
            }
        });

        jPanel2.add(jTextArea2, java.awt.BorderLayout.CENTER);

        jDialogQuery.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jSlider1.setFont(new java.awt.Font("Dialog", 0, 8));
        jSlider1.setMajorTickSpacing(100);
        jSlider1.setMaximum(500);
        jSlider1.setMinimum(-500);
        jSlider1.setMinorTickSpacing(50);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(500);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jPanel3.add(jSlider1, java.awt.BorderLayout.CENTER);

        jTextField3.setBackground(new java.awt.Color(204, 204, 204));
        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("5.00");
        jTextField3.setBorder(null);
        jTextField3.setMinimumSize(new java.awt.Dimension(20, 16));
        jTextField3.setPreferredSize(new java.awt.Dimension(50, 19));
        jPanel3.add(jTextField3, java.awt.BorderLayout.WEST);

        jButtonOK.setFont(new java.awt.Font("Dialog", 1, 14));
        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonOK, java.awt.BorderLayout.EAST);

        jDialogQuery.getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        jFrameTree.setTitle("Network");
        jSplitPane1.setMinimumSize(new java.awt.Dimension(200, 220));
        jScrollPane3.setBorder(null);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(0, 0));
        jTree1.setBackground(new java.awt.Color(224, 255, 204));
        jTree1.setShowsRootHandles(true);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane3);

        jScrollPane4.setBorder(null);
        jTextArea3.setBackground(new java.awt.Color(224, 255, 204));
        jTextArea3.setEditable(false);
        jTextArea3.setTabSize(2);
        jTextArea3.setBorder(null);
        jTextArea3.setAutoscrolls(false);
        jScrollPane4.setViewportView(jTextArea3);

        jSplitPane1.setRightComponent(jScrollPane4);

        jFrameTree.getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        setTitle("Expert");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(204, 204, 204));
        jTextField2.setFont(new java.awt.Font("Dialog", 1, 10));
        jTextField2.setText("Transient Memory");
        jTextField2.setBorder(null);
        getContentPane().add(jTextField2, java.awt.BorderLayout.SOUTH);

        jTextArea1.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea1.setTabSize(2);
        jTextArea1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTextArea1ComponentResized(evt);
            }
        });

        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jMenu2.setText("File");
        jMenuItemDisplay.setText("Show display");
        jMenuItemDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisplayActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemDisplay);

        jMenuItemNet.setText("Show network");
        jMenuItemNet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNetActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemNet);

        jMenu2.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemExit);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        pack();
    }//GEN-END:initComponents

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        if(evt.getButton() == 1)
        {
                jTree1.setSelectionRow(jTree1.getRowForLocation(evt.getX(), evt.getY()));
                javax.swing.tree.DefaultMutableTreeNode node = 
                    (javax.swing.tree.DefaultMutableTreeNode)(jTree1.getLastSelectedPathComponent());
                if(node == null) return;
                if(node.isRoot()) jTextArea3.setText(ReteConflictSet.getReport());
                else jTextArea3.setText(((ReteNode)(node.getUserObject())).getReport());
        }

        else if(evt.getButton() == 3)
        {
            jTextArea3.setText("-- Inferencing thread information:\n");
						jTextArea3.append("\t" + ithread.toString() + "\n");
						jTextArea3.append("\tName = " + ithread.getName() + "\n");
						jTextArea3.append("\tPriority = " + ithread.getPriority() + "\n");
						jTextArea3.append("\tActive threads = " + ithread.activeCount() + "\n");
            jTextArea3.append("\n-- Working memory buffer:\n");
						if(rn != null)jTextArea3.append(rn.listOfMemoryObjects());
        }

    }//GEN-LAST:event_jTree1MouseClicked

    private void jTextArea1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTextArea1ComponentResized
        jScrollPane2.getVerticalScrollBar().setValue(
            (int)jScrollPane2.getVerticalScrollBar().getMaximumSize().getHeight()
        );
    }//GEN-LAST:event_jTextArea1ComponentResized

    private void jTextArea2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea2MouseClicked
        if(evt.getButton() == 3)
        {
            jTextField1.setText(jTextArea2.getSelectedText());
        }
    }//GEN-LAST:event_jTextArea2MouseClicked

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        int val = jSlider1.getValue();
        if(val < 0)
            jTextField3.setText("-" + (-val/100) + "." + ((-val)%100)/10 + "" + ((-val)%10));
        else
            jTextField3.setText("" + (val/100) + "." + ((val)%100)/10 + "" + ((val)%10));
    }//GEN-LAST:event_jSlider1StateChanged

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNetActionPerformed
        rn.BuildTree(jTree1);
        jFrameTree.setVisible(true);
    }//GEN-LAST:event_jMenuItemNetActionPerformed

    private void jMenuItemDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisplayActionPerformed
        jFrameDisplay.setVisible(true);
    }//GEN-LAST:event_jMenuItemDisplayActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        if(Certainty <= 5 && Certainty >= -5)
        {
            Certainty = (new Double(jTextField3.getText())).doubleValue();
        }
        Answer = jTextField1.getText();
        jDialogQuery.setVisible(false);
        SetReading(false);
    }//GEN-LAST:event_jButtonOKActionPerformed

		private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
				if(evt.getKeyCode()== evt.VK_ENTER) jButtonOKActionPerformed(null);
		}//GEN-LAST:event_jTextField1KeyPressed

		/** Exit the Application */
		private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
		if(rn != null)
		{
			rn.Stop();
		}
		System.exit(0);

		}//GEN-LAST:event_exitForm
		/**
		* @param args the command line arguments
		*/
		public static void main(String args[]) 
		{
			Expert expert = new Expert();
      expert.jFrameTree.setBounds(240, 10, 380, 400);
      expert.setBounds(10, 10, 380, 450);
			expert.jTextField2.setText("Starting system.");
			expert.setVisible(true); //show();
      
			expert.Start();
		}

		public void Start() 
		{
			try
			{
				ithread = new CheckMemoryThread(this);
				ithread.setDaemon(true);
				ithread.start();
			}
			catch(Throwable e)
			{
				jTextField2.setText("Cannot start new thread");
			}
		}

		class CheckMemoryThread extends Thread
		{
			Expert ex;
			public CheckMemoryThread(Expert exp)
			{
				ex = exp;
			}

			public void run()
			{
				int ee = 0;
				jTextField2.setText("Starting system..");
				try 
				{
					ReteNetwork.WinMain(ex);
					jTextField2.setText("Inferencing stopped");
				} 
				catch(Throwable e)
				{
					jTextField2.setText("Cannot start inferencing");
				};
			}
		}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JDialog jDialogQuery;
    private javax.swing.JFrame jFrameDisplay;
    private javax.swing.JFrame jFrameTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItemDisplay;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNet;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
