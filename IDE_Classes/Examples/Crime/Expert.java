//==============================================================================
//==============================================================================
//==                                    ===****=====**=====**=====****==========
//==  Expert.java                       ===*===*====*=*===*=*====*====*=========
//==                                    ===*===*====*==*=*==*=====**============
//==  (C) 2002 by Piotr M. Szczypinski  ===****=====*===*===*=======**==========
//==  NIST - Gaithersburg               ===*========*=======*====*====*=========
//==                                    ===*========*=======*=====****==========
//==============================================================================
//==============================================================================
import MemoryServer.*;
import ReteObjects.*;

import org.omg.CORBA.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;

/**
 *
 * @author  pms
 */
public class Expert extends javax.swing.JFrame {
    private WMGetSetObject impl=null;
    private ORB orb;
    private Any anyholder;
    private boolean reading = false;
    public ReteNetwork rn;

    public String[] argums = {};
    public int crm = 0; // Conflict resolution method

    private synchronized void SetReading(boolean r)
    {
      reading = r;
      notifyAll();
    }

    public void Print(String string)
    {
        jTextArea1.append(string);
    }
    public synchronized String Read()
    {
        String ret;
        reading = true;
        jTextField1.setEditable(true);
        jTextField1.setText("");
        jTextField1.requestFocus();
        jTextField1.setCaretPosition(0);
        while(reading == true) 
        {  
          try{wait();}
          catch(Throwable e){Thread.yield();}
        }
        jTextField1.setEditable(false);
        ret = jTextField1.getText();

        Print(ret + "\r\n");
        return ret;
    }
    public void Display(String filename)
    {
        jLabel1.setIcon(new javax.swing.ImageIcon (filename));
    }
 
    /** Creates new form Expert */
    public Expert() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();

        setTitle("Expert");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(jLabel1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextField1.setEditable(false);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jPanel1.add(jTextField1, java.awt.BorderLayout.SOUTH);

        jScrollPane2.setBorder(null);
        jScrollPane2.setAutoscrolls(true);
        jTextArea1.setBackground(new java.awt.Color(255, 255, 204));
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setTabSize(2);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jTextField2.setBackground(new java.awt.Color(204, 204, 204));
        jTextField2.setFont(new java.awt.Font("Dialog", 1, 10));
        jTextField2.setBorder(null);
        jTextField2.setEditable(false);
        getContentPane().add(jTextField2, java.awt.BorderLayout.SOUTH);
        pack();
    }//GEN-END:initComponents

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // Add your handling code here:
        if(evt.getKeyCode()== evt.VK_ENTER) SetReading(false);//reading = false;
/*        
        {
            String name = jTextField1.getText();
            String[] namesplit = name.split(" ");
            
//            jLabel1.setIcon(new javax.swing.ImageIcon (jTextField1.getText()));
            jTextArea1.append("    " + name + "\n");

            mechanic mmm = new mechanic();
            mmm.first_name = namesplit[1];
            mechanicHelper.insert(anyholder, mmm);
            
            impl.WMSetObject(anyholder, namesplit[0]);
            
            jTextField1.setText("");
        }
 */
    }//GEN-LAST:event_jTextField1KeyPressed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        if(rn != null)
        {
          rn.stop = true;
          Thread.yield();
        }
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void ConnectServer()
    {
      try{
          // create and initialize the ORB
          jTextField2.setText("Initializing ORB...");

          orb = ORB.init(argums, null);
          anyholder = orb.create_any();

//jTextArea1.append("Initializing ORB with:" + argums.toString() +"\n");

          // get the root naming context
          org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");

          // Use NamingContextExt instead of NamingContext. This is
          // part of the Interoperable Naming Service.
          NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

          jTextField2.setText("Connecting to memory...");

          // resolve the Object Reference in Naming
          String name = "WMGetSetObject";
          impl = WMGetSetObjectHelper.narrow(ncRef.resolve_str(name));

          //System.out.println("Handle obtained on server object: " + impl);
//          jTextArea1.append("Handle obtained on server object: " + impl +"\n");
//          if(impl != null)
//            (new CheckMemoryThread(impl, this)).start();

      }
      catch(Throwable e)
      {
        impl = null;
        jTextArea1.append("Exception in WMServer Startup " + e +"\n");
                //System.err.println(e.getMessage());
                //e.printStackTrace();

      }
    }

    private void Inference()
    {
      try{
        (new CheckMemoryThread(impl, this)).start();
      }
      catch(Throwable e)
      {
//        System.err.println(e.getMessage());
//        e.printStackTrace();
      }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        Expert expert = new Expert();
        
        expert.crm = 0;
        if(args.length > 0)
        {
          if(args[0].compareToIgnoreCase("-Lex")==0) expert.crm = 1;
          else if(args[0].compareToIgnoreCase("-MEA")==0) expert.crm = 2;
          else if(args[0].compareToIgnoreCase("-BC")==0) expert.crm = 3;
        }
        if(expert.crm == 0) expert.argums = args;
        else
        {
           expert.argums = new String[args.length - 1];
           for(int ar = 0; ar < (args.length-1); ar++) expert.argums[ar] = args[ar+1];
        }

/*        
////////////////???????????????????
expert.jTextArea1.append("Main Args:\n");
for(int gg = 0; gg < args.length; gg++) expert.jTextArea1.append("#"+ args[gg] + "$");
////////////////???????????????????
expert.jTextArea1.append("\n\nMain Argums:\n");
for(int gg = 0; gg < expert.argums.length; gg++) expert.jTextArea1.append("#"+ expert.argums[gg] + "$");
*/

        expert.jTextField2.setText("Starting system...");
        expert.show();
        
        if(expert.argums.length > 0) expert.ConnectServer();
        expert.Inference();
    }

    class CheckMemoryThread extends Thread
	{
		WMGetSetObject im;
//		javax.swing.JTextArea ta;
		int time_stamp = 0;
		Expert ex;

		public CheckMemoryThread(WMGetSetObject impl, Expert exp)
		{
//			ta = txtar;
			ex = exp;
			im = impl;
		}
 		public void run()
		{
      StringBuffer sb = new StringBuffer();
      for(int ar = 0; ar < argums.length; ar++) sb.append(argums[ar] + " ");

      if(im == null) jTextField2.setText("Inferencing - transient memory");
      else jTextField2.setText("Inferencing - persistent memory: " + sb.toString());

      try 
      {
        rn = ReteNetwork.WinMain(ex, im, anyholder);
//        Print("\nInferencing stopped\n");
        jTextField2.setText("Inferencing stopped");
      } 
			catch(Throwable e)
			{
//				System.err.println(e.getMessage());
//                e.printStackTrace();
//        Print("\nInferencing stopped\n");
        jTextField2.setText("Inferencing stopped!");

			};
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
